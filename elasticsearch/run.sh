#!/bin/bash

for i in "$@"
do
case $i in
    -v=*|--version=*)
    ELASTIC_VERSION="${i#*=}"
    ;;
    -ep=*|--expose-port=*)
    ELASTIC_PORT="${i#*=}"
    ;;
    -ep2=*|--expose-http-port=*)
    ELASTIC_HTTP_PORT="${i#*=}"
    ;;
    -dv=*|--data-volume=*)
    ELASTIC_DATA_VOLUME="${i#*=}"
    ;;
    -cv=*|--config-volume=*)
    ELASTIC_CONFIG_VOLUME="${i#*=}"
    ;;
    -n=*|--name=*)
    ELASTIC_CONTAINER_NAME="${i#*=}"
    ;;
    --help)
    HELP=YES
    shift # past argument with no value 
    ;;
    --debug)
    DEBUG=YES
    shift # past argument with no value 
    ;;
    *)
        # unknown option
    ;;
esac
done

if [ "$DEBUG" == "YES" ]; then 
    set -x
fi

. ./defaults.properties

fDisplayUsage() {
    cat << EOF

 USAGE: ./run.sh 
    [-v   | --version=<ElasticSearch Version>  ] ElasticSearch version, defaults to 6.6.0
    [-ep  | --expose-port=<ElasticSearch Port> ] Server expose port, defaults to 9300
    [-ep2 | --expose-http-port=<HTTP Port> ]     Server HTTP Interface port, defaults to 9200
    [-cv  | --config-volume=<Data Volume> ]      The mapped config volume. Autogenerated if not supplied
    [-dv  | --data-volume=<Data Volume> ]        The mapped data volume. Autogenerated if not supplied
    [-n   | --name=<Container Name> ]            The name of the docker container. Optional
    [--help]                                     Displays this text
    [--debug]                                    Runs the script in debug mode

EOF
}

fLog() {
   echo "[$(date -u +'%Y-%m-%dT%H:%M:%SZ')] $*"
}

fPrintArgs() {
    ELASTIC_VERSION=${ELASTIC_VERSION:-$DEFAULT_ELASTIC_VERSION}
    ELASTIC_PORT=${ELASTIC_PORT:-$DEFAULT_ELASTIC_PORT}
    ELASTIC_HTTP_PORT=${ELASTIC_HTTP_PORT:-$DEFAULT_ELASTIC_HTTP_PORT}
    ELASTIC_DATA_VOLUME=${ELASTIC_DATA_VOLUME:-elasticsearch_${ELASTIC_VERSION}_${ELASTIC_CONTAINER_NAME:-'default'}_data}
    ELASTIC_CONFIG_VOLUME=${ELASTIC_CONFIG_VOLUME:-elasticsearch_${ELASTIC_VERSION}_${ELASTIC_CONTAINER_NAME:-'default'}_config}

    echo
    fLog " Preparing Docker container with the following properties: "
    fLog "     ** Version       = $ELASTIC_VERSION"
    fLog "     ** Container     = $ELASTIC_CONTAINER_NAME"
    fLog "     ** Comm Port     = $ELASTIC_PORT"
    fLog "     ** HTTP Port     = $ELASTIC_HTTP_PORT"
    fLog "     ** Data Volume   = $ELASTIC_DATA_VOLUME"
    fLog "     ** Config Volume = $ELASTIC_CONFIG_VOLUME"
    echo
}

fCreateDataVolumeOrDie() {
    fLog " Creating volume $ELASTIC_DATA_VOLUME ..."
    docker volume inspect $ELASTIC_DATA_VOLUME 1> /dev/null 2> /dev/null
    if [ $? == 0 ]; then
        echo " ERROR (-4): Data volume $ELASTIC_DATA_VOLUME already exists!"
        fDisplayUsage
        exit -4
    else
        docker volume create $ELASTIC_DATA_VOLUME 1> /dev/null
    fi
}

fCreateConfigVolumeOrDie() {
    fLog " Creating volume $ELASTIC_CONFIG_VOLUME ..."
    docker volume inspect $ELASTIC_CONFIG_VOLUME 1> /dev/null 2> /dev/null
    if [ $? == 0 ]; then
        echo " ERROR (-4): Data volume $ELASTIC_CONFIG_VOLUME already exists!"
        fDisplayUsage
        exit -4
    else
        docker volume create $ELASTIC_CONFIG_VOLUME 1> /dev/null
    fi
}

fRunNamedContainerOrDie() {
    fLog " Creating named ontainer $ELASTIC_CONTAINER_NAME ..."
    docker container inspect $ELASTIC_CONTAINER_NAME 1> /dev/null 2> /dev/null
    if [ $? == 0 ]; then
        echo " ERROR (-3): Container $ELASTIC_CONTAINER_NAME already exists!"
        fDisplayUsage
        exit -3
    fi

    docker run \
        --name $ELASTIC_CONTAINER_NAME \
        -p $ELASTIC_PORT:$DEFAULT_ELASTIC_PORT \
        -p $ELASTIC_HTTP_PORT:$DEFAULT_ELASTIC_HTTP_PORT \
        -d \
        -e "discovery.type=single-node" \
        -v "$ELASTIC_DATA_VOLUME:/usr/share/elasticsearch/data/" \
        -v "$ELASTIC_CONFIG_VOLUME:/usr/share/elasticsearch/config/" \
        docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_VERSION
}

fRunContainer() {
    fLog " Creating container ..."

    docker run \
        -p $ELASTIC_PORT:$DEFAULT_ELASTIC_PORT \
        -p $ELASTIC_HTTP_PORT:$DEFAULT_ELASTIC_HTTP_PORT \
        -d \
        -e "discovery.type=single-node" \
        -v "$ELASTIC_DATA_VOLUME:/usr/share/elasticsearch/data/" \
        -v "$ELASTIC_CONFIG_VOLUME:/usr/share/elasticsearch/config/" \
        docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_VERSION
}

if [ "$HELP" == "YES" ]; then 
    fDisplayUsage
else
    fPrintArgs
    fCreateDataVolumeOrDie
    fCreateConfigVolumeOrDie

    if [ -z "$ELASTIC_CONTAINER_NAME" ]; then
        fRunContainer
    else
        fRunNamedContainerOrDie
    fi

    fLog " Done!"
    echo
fi